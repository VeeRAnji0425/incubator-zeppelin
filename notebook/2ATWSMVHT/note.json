{
  "paragraphs": [
    {
      "title": "Documentation",
      "text": "%md\n\n### This is a demo for a **Zeppelin Cassandra interpreter**\n\n## How to build\n1. Checkout the repo with `git clone -b CassandraInterpreterExtended https://github.com/doanduyhai/incubator-zeppelin/`\n2. Ensure you have [Bower] installed and working\n3. Ensure you have [Maven 3.x] and [Scala] installed and working\n4. Build the project with `mvn clean package -DskipTests`\n5. Start **Zeppelin** with `$ZEPPLIN_HOME/bin/zeppelin-daemon.sh start`\n6. Connect to [http://localhost:8080](http://localhost:8080)\n7. Select the **Cassandra** notebook\n8. The first time you access a notebook, you\u0027ll be prompted to select _Interpreters_ for the current notebook. Just select all (or only **Markdown** and **Cassandra**) and click on **Save**\n9. Optionally you can configure the **Java Driver** settings in the **Interpreter** menu, section **cassandra**\n\n[Bower]: http://bower.io/\n[Maven 3.x]: https://maven.apache.org/download.cgi\n[Scala]: http://www.scala-lang.org/download/install.html",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435592511032_150731947",
      "id": "20150629-174151_1103377898",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eThis is a demo for a \u003cstrong\u003eZeppelin Cassandra interpreter\u003c/strong\u003e\u003c/h3\u003e\n\u003ch2\u003eHow to build\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eCheckout the repo with \u003ccode\u003egit clone -b CassandraInterpreterExtended https://github.com/doanduyhai/incubator-zeppelin/\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eEnsure you have \u003ca href\u003d\"http://bower.io/\"\u003eBower\u003c/a\u003e installed and working\u003c/li\u003e\n\u003cli\u003eEnsure you have \u003ca href\u003d\"https://maven.apache.org/download.cgi\"\u003eMaven 3.x\u003c/a\u003e and \u003ca href\u003d\"http://www.scala-lang.org/download/install.html\"\u003eScala\u003c/a\u003e installed and working\u003c/li\u003e\n\u003cli\u003eBuild the project with \u003ccode\u003emvn clean package -DskipTests\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eStart \u003cstrong\u003eZeppelin\u003c/strong\u003e with \u003ccode\u003e$ZEPPLIN_HOME/bin/zeppelin-daemon.sh start\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eConnect to \u003ca href\u003d\"http://localhost:8080\"\u003ehttp://localhost:8080\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSelect the \u003cstrong\u003eCassandra\u003c/strong\u003e notebook\u003c/li\u003e\n\u003cli\u003eThe first time you access a notebook, you\u0027ll be prompted to select \u003cem\u003eInterpreters\u003c/em\u003e for the current notebook. Just select all (or only \u003cstrong\u003eMarkdown\u003c/strong\u003e and \u003cstrong\u003eCassandra\u003c/strong\u003e) and click on \u003cstrong\u003eSave\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eOptionally you can configure the \u003cstrong\u003eJava Driver\u003c/strong\u003e settings in the \u003cstrong\u003eInterpreter\u003c/strong\u003e menu, section \u003cstrong\u003ecassandra\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n"
      },
      "dateCreated": "Jun 29, 2015 5:41:51 PM",
      "dateStarted": "Jun 29, 2015 6:34:40 PM",
      "dateFinished": "Jun 29, 2015 6:34:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "01-Statement validation",
      "text": "%cassandra\n\nSELECT * FROM spark_demo.;",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": false,
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1434555040550_-1996931619",
      "id": "20150617-173040_706371145",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "com.datastax.driver.core.exceptions.SyntaxErrorline 1:25 no viable alternative at input \u0027;\u0027 (SELECT * FROM spark_demo.[;]) : \n\t at com.datastax.driver.core.exceptions.SyntaxError.copy(SyntaxError.java):35\n\t at com.datastax.driver.core.DefaultResultSetFuture.extractCauseFromExecutionException(DefaultResultSetFuture.java):291\n\t at com.datastax.driver.core.DefaultResultSetFuture.getUninterruptibly(DefaultResultSetFuture.java):205\n\t at com.datastax.driver.core.AbstractSession.execute(AbstractSession.java):52\n\t at org.apache.zeppelin.cassandra.CassandraInterpreterHelper$$anonfun$12.apply(CassandraInterpreterHelper.scala):136\n\t at org.apache.zeppelin.cassandra.CassandraInterpreterHelper$$anonfun$12.apply(CassandraInterpreterHelper.scala):136\n\t at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala):244\n\t at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala):244\n\t at scala.collection.immutable.List.foreach(List.scala):318\n\t at scala.collection.TraversableLike$class.map(TraversableLike.scala):244\n\t at scala.collection.AbstractTraversable.map(Traversable.scala):105\n\t at org.apache.zeppelin.cassandra.CassandraInterpreterHelper.interpret(CassandraInterpreterHelper.scala):136\n\t at org.apache.zeppelin.cassandra.CassandraInterpreter.interpret(CassandraInterpreter.java):436\n\t at org.apache.zeppelin.interpreter.ClassloaderInterpreter.interpret(ClassloaderInterpreter.java):57\n\t at org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java):93\n\t at org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java):276\n\t at org.apache.zeppelin.scheduler.Job.run(Job.java):170\n\t at org.apache.zeppelin.scheduler.ParallelScheduler$JobRunner.run(ParallelScheduler.java):146\n\t at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java):511\n\t at java.util.concurrent.FutureTask.run(FutureTask.java):266\n\t at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java):180\n\t at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java):293\n\t at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java):1142\n\t at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java):617\n\t at java.lang.Thread.run(Thread.java):745\n"
      },
      "dateCreated": "Jun 17, 2015 5:30:40 PM",
      "dateStarted": "Jul 19, 2015 1:32:17 PM",
      "dateFinished": "Jul 19, 2015 1:32:17 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "02-Mandatory Semi-colon to separate statements",
      "text": "%cassandra\n\nSELECT * FROM spark_demo.performers",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorHide": false,
        "tableHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1434837469149_-1809454810",
      "id": "20150620-235749_2045548720",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Cannot find any statement for the input : SELECT * FROM spark_demo.performers\n Did you forget to add ; (semi-colon) at the end of each CQL statement ?"
      },
      "dateCreated": "Jun 20, 2015 11:57:49 PM",
      "dateStarted": "Jun 29, 2015 10:03:50 PM",
      "dateFinished": "Jun 29, 2015 10:03:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "03-Dynamic form for cQL statements",
      "text": "%cassandra\n\nSELECT name,country,styles from {{1_Table\u003dspark_demo.performers}} WHERE name\u003d\u0027{{2_Performer\u003dSheryl Crow|Doof|Fanfarlo|Los Paranoias}}\u0027;",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 98.0,
          "optionOpen": true,
          "keys": [
            {
              "name": "country",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "editorHide": false,
        "tableHide": false,
        "title": true
      },
      "settings": {
        "params": {
          "performer": "Fanfarlo",
          "Performer": "Sheryl Crow",
          "Table": "spark_demo.performers",
          "1_Table": "spark_demo.performers",
          "2_Performer": "Sheryl Crow"
        },
        "forms": {
          "1_Table": {
            "name": "1_Table",
            "displayName": "1_Table",
            "defaultValue": "spark_demo.performers",
            "hidden": false
          },
          "2_Performer": {
            "name": "2_Performer",
            "displayName": "2_Performer",
            "defaultValue": "Sheryl Crow",
            "options": [
              {
                "value": "Sheryl Crow",
                "displayName": "Sheryl Crow"
              },
              {
                "value": "Doof",
                "displayName": "Doof"
              },
              {
                "value": "Fanfarlo",
                "displayName": "Fanfarlo"
              },
              {
                "value": "Los Paranoias",
                "displayName": "Los Paranoias"
              }
            ],
            "hidden": false
          }
        }
      },
      "jobName": "paragraph_1434555973208_1686231851",
      "id": "20150617-174613_243660456",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "name\tcountry\tstyles\nSheryl Crow\tUSA\t[Classic, Rock, Country, Blues, Pop, Folk]\n"
      },
      "dateCreated": "Jun 17, 2015 5:46:13 PM",
      "dateStarted": "Jul 20, 2015 1:34:15 PM",
      "dateFinished": "Jul 20, 2015 1:34:15 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "04-Multi statements execution",
      "text": "%cassandra\n\nINSERT INTO spark_demo.performers(name,country,styles) VALUES(\u0027Patrick McFadin\u0027,\u0027USA\u0027,[\u0027Evangelism\u0027,\u0027Technical Gospel\u0027]);\nSELECT name,country,styles FROM spark_demo.performers WHERE name\u003d\u0027Patrick McFadin\u0027; ",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 98.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "country",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "country",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "title": true,
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1434658846194_482345008",
      "id": "20150618-222046_1684553244",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "name\tcountry\tstyles\nPatrick McFadin\tUSA\t[Evangelism, Technical Gospel]\n"
      },
      "dateCreated": "Jun 18, 2015 10:20:46 PM",
      "dateStarted": "Jun 29, 2015 6:37:43 PM",
      "dateFinished": "Jun 29, 2015 6:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "05-Statements with comments",
      "text": "%cassandra\n\n/*\n This is a multi-line\n comment\n*/\n#Some comments\n#Other comments\nSELECT * FROM spark_demo.performers LIMIT 1;\n\n#More comments",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 94.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "born",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "born",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435160446281_238693770",
      "id": "20150624-174046_189263237",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "name\tborn\tcountry\tdied\tgender\tsolr_query\tstyles\ttype\nBogdan Raczynski\t1977-01-01\tPoland\tnull\tMale\tnull\t[Dance, Electro]\tPerson\n"
      },
      "dateCreated": "Jun 24, 2015 5:40:46 PM",
      "dateStarted": "Jul 19, 2015 1:34:05 PM",
      "dateFinished": "Jul 19, 2015 1:34:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "06-Passing runtime consistency",
      "text": "%cassandra\n# Passing runtime consistency with @consistency\u003dxxx\n@consistency\u003dTHREE\nSELECT * FROM spark_demo.performers LIMIT 5;",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "born",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "born",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435351809161_-1819146800",
      "id": "20150626-225009_697293348",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "com.datastax.driver.core.exceptions.UnavailableExceptionNot enough replica available for query at consistency THREE (3 required but only 1 alive) : \n\t at com.datastax.driver.core.exceptions.UnavailableException.copy(UnavailableException.java):79\n\t at com.datastax.driver.core.DefaultResultSetFuture.extractCauseFromExecutionException(DefaultResultSetFuture.java):291\n\t at com.datastax.driver.core.DefaultResultSetFuture.getUninterruptibly(DefaultResultSetFuture.java):205\n\t at com.datastax.driver.core.AbstractSession.execute(AbstractSession.java):52\n\t at org.apache.zeppelin.cassandra.CassandraInterpreterHelper$$anonfun$12.apply(CassandraInterpreterHelper.scala):136\n\t at org.apache.zeppelin.cassandra.CassandraInterpreterHelper$$anonfun$12.apply(CassandraInterpreterHelper.scala):136\n\t at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala):244\n\t at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala):244\n\t at scala.collection.immutable.List.foreach(List.scala):318\n\t at scala.collection.TraversableLike$class.map(TraversableLike.scala):244\n\t at scala.collection.AbstractTraversable.map(Traversable.scala):105\n\t at org.apache.zeppelin.cassandra.CassandraInterpreterHelper.interpret(CassandraInterpreterHelper.scala):136\n\t at org.apache.zeppelin.cassandra.CassandraInterpreter.interpret(CassandraInterpreter.java):436\n\t at org.apache.zeppelin.interpreter.ClassloaderInterpreter.interpret(ClassloaderInterpreter.java):57\n\t at org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java):93\n\t at org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java):276\n\t at org.apache.zeppelin.scheduler.Job.run(Job.java):170\n\t at org.apache.zeppelin.scheduler.ParallelScheduler$JobRunner.run(ParallelScheduler.java):146\n\t at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java):511\n\t at java.util.concurrent.FutureTask.run(FutureTask.java):266\n\t at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java):180\n\t at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java):293\n\t at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java):1142\n\t at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java):617\n\t at java.lang.Thread.run(Thread.java):745\n"
      },
      "dateCreated": "Jun 26, 2015 10:50:09 PM",
      "dateStarted": "Jul 19, 2015 1:35:34 PM",
      "dateFinished": "Jul 19, 2015 1:35:35 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "07-Passing runtime retryPolicy",
      "text": "%cassandra\n# Passing runtime retry policy using @retryPolicy\u003dxxx\n# Possible values for retry policy are:\n# - DEFAULT\n# - DOWNGRADING_CONSISTENCY\n# - FALLTHROUGH\n# - LOGGING_DEFAULT\n# - LOGGING_DOWNGRADING\n# - LOGGING_FALLTHROUGH\n\n# The below query should fails but thanks to downgrading consistency retry it will succeed\n@consistency\u003dTHREE\n@retryPolicy\u003dDOWNGRADING_CONSISTENCY\nSELECT * FROM spark_demo.performers LIMIT 1;",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 99.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "born",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "born",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435590326676_137692644",
      "id": "20150629-170526_546510452",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "name\tborn\tcountry\tdied\tgender\tsolr_query\tstyles\ttype\nBogdan Raczynski\t1977-01-01\tPoland\tnull\tMale\tnull\t[Dance, Electro]\tPerson\n"
      },
      "dateCreated": "Jun 29, 2015 5:05:26 PM",
      "dateStarted": "Jun 29, 2015 5:10:31 PM",
      "dateFinished": "Jun 29, 2015 5:10:31 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "08-Passing Runtime timestamp",
      "text": "%cassandra\n\n#Timestamp in the past\n@timestamp\u003d10\nCREATE TABLE IF NOT EXISTS spark_demo.ts(key int PRIMARY KEY, value text);\nTRUNCATE spark_demo.ts;\n\n#Force timestamp directly in the first INSERT\nINSERT INTO spark_demo.ts(key,value) VALUES(1,\u0027val1\u0027) USING TIMESTAMP 100;\n\n#Select some data to loose some time\nSELECT * FROM spark_demo.albums LIMIT 100;\n\n#Use @timestamp value set at the beginning(10)\nINSERT INTO spark_demo.ts(key,value) VALUES(1,\u0027val2\u0027) ;\n\n#Check the result\nSELECT * FROM spark_demo.ts WHERE key\u003d1;",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 94.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "key",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "value",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "key",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "value",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435590631475_1289121864",
      "id": "20150629-171031_1708632876",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "key\tvalue\n1\tval1\n"
      },
      "dateCreated": "Jun 29, 2015 5:10:31 PM",
      "dateStarted": "Jul 19, 2015 1:27:23 PM",
      "dateFinished": "Jul 19, 2015 1:27:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "09-Prepare statements",
      "text": "%cassandra\n\n@prepare[select_10_artists]\u003dSELECT name,country,styles FROM spark_demo.performers LIMIT 10\n@prepare[select_artist_by_name]\u003dSELECT name,country,styles FROM spark_demo.performers WHERE name\u003d:name\n",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435590948510_-2008143393",
      "id": "20150629-171548_500198699",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "No Result"
      },
      "dateCreated": "Jun 29, 2015 5:15:48 PM",
      "dateStarted": "Jul 21, 2015 1:49:48 PM",
      "dateFinished": "Jul 21, 2015 1:49:48 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "10-Reuse Statements",
      "text": "%cassandra\n\n@bind[select_artist_by_name]\u003d\u0027The Beatles\u0027\n#@bind[select_10_artists]",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 99.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "country",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "country",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1437305338217_-535501888",
      "id": "20150719-132858_1464989874",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "name\tcountry\tstyles\nThe Beatles\tUnited Kingdom\t[Classic, Orchestral, Experimental, Rock, Alternative, Indie, Instrumental, Metal, Psychedelic, Vocal, Pop, Folk, Progressive, Beat]\n"
      },
      "dateCreated": "Jul 19, 2015 1:28:58 PM",
      "dateStarted": "Jul 20, 2015 1:30:16 PM",
      "dateFinished": "Jul 20, 2015 1:30:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "11-Removing an existing prepared statement",
      "text": "%cassandra\n\n#Removing an unknow statement should has no side effect\n@remove_prepare[unknow_statement]\n@remove_prepare[select_artist_by_name]\n\n#This should fail because the \u0027select_artist_by_name\u0027 has been removed\n@bind[select_artist_by_name]\u003d\u0027The Beatles\u0027",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1437305379102_-182040242",
      "id": "20150719-132939_1380018932",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "The statement \u0027select_artist_by_name\u0027 can not be bound to values. Are you sure you did prepare it with @prepare[select_artist_by_name] ?"
      },
      "dateCreated": "Jul 19, 2015 1:29:39 PM",
      "dateStarted": "Jul 19, 2015 2:09:37 PM",
      "dateFinished": "Jul 19, 2015 2:09:37 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%cassandra\nUSE spark_demo;\nCREATE TABLE IF NOT EXISTS test_album(\n    artist text,\n    title text,\n    PRIMARY KEY((artist),title)\n);\n\nINSERT INTO test_album(artist,title) VALUES(\u0027a\u0027,\u0027A\u0027);\nINSERT INTO test_album(artist,title) VALUES(\u0027a\u0027,\u0027Acid\u0027);\nINSERT INTO test_album(artist,title) VALUES(\u0027a\u0027,\u0027Basics\u0027);\nINSERT INTO test_album(artist,title) VALUES(\u0027a\u0027,\u0027Demeter\u0027);\nINSERT INTO test_album(artist,title) VALUES(\u0027a\u0027,\u0027D\u0027);\nINSERT INTO test_album(artist,title) VALUES(\u0027a\u0027,\u0027E\u0027);\nINSERT INTO test_album(artist,title) VALUES(\u0027a\u0027,\u0027Eternal\u0027);\n\nSELECT * FROM test_album WHERE artist \u003d \u0027a\u0027\nAND title \u003e\u003d \u0027A\u0027\nAND title \u003c \u0027E\u0027;",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "artist",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "artist",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1437306888497_152838489",
      "id": "20150719-135448_1965396788",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "artist\ttitle\na\tA\na\tAcid\na\tBasics\na\tConstrast\na\tD\na\tDemeter\n"
      },
      "dateCreated": "Jul 19, 2015 1:54:48 PM",
      "dateStarted": "Jul 19, 2015 3:39:41 PM",
      "dateFinished": "Jul 19, 2015 3:39:41 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%cassandra\n#Adding a semi-colon at the end of a parameter config is always an error\n@remove_prepare[unknow_statement];",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 94.0,
          "optionOpen": true,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1437312661064_-1690281195",
      "id": "20150719-153101_1121195280",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Invalid syntax for @remove_prepare. It should comply to the pattern: @remove_prepare[prepared_statement_name]"
      },
      "dateCreated": "Jul 19, 2015 3:31:01 PM",
      "dateStarted": "Jul 21, 2015 1:46:01 PM",
      "dateFinished": "Jul 21, 2015 1:46:01 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%cassandra\n#Having a block of statement with missing semi-colon is always an error\nUSE spark_demo;\nSELECT * FROM albums LIMIT 10\nSELECT name,country,styles FROM performers LIMIT 10;",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1437391935426_1742682322",
      "id": "20150720-133215_744040082",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "com.datastax.driver.core.exceptions.SyntaxErrorline 2:0 missing EOF at \u0027SELECT\u0027 (...* FROM albums LIMIT 10[SELECT] name...) : \n\t at com.datastax.driver.core.exceptions.SyntaxError.copy(SyntaxError.java):35\n\t at com.datastax.driver.core.DefaultResultSetFuture.extractCauseFromExecutionException(DefaultResultSetFuture.java):291\n\t at com.datastax.driver.core.DefaultResultSetFuture.getUninterruptibly(DefaultResultSetFuture.java):205\n\t at com.datastax.driver.core.AbstractSession.execute(AbstractSession.java):52\n\t at org.apache.zeppelin.cassandra.CassandraInterpreterHelper$$anonfun$12.apply(CassandraInterpreterHelper.scala):136\n\t at org.apache.zeppelin.cassandra.CassandraInterpreterHelper$$anonfun$12.apply(CassandraInterpreterHelper.scala):136\n\t at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala):244\n\t at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala):244\n\t at scala.collection.immutable.List.foreach(List.scala):318\n\t at scala.collection.TraversableLike$class.map(TraversableLike.scala):244\n\t at scala.collection.AbstractTraversable.map(Traversable.scala):105\n\t at org.apache.zeppelin.cassandra.CassandraInterpreterHelper.interpret(CassandraInterpreterHelper.scala):136\n\t at org.apache.zeppelin.cassandra.CassandraInterpreter.interpret(CassandraInterpreter.java):436\n\t at org.apache.zeppelin.interpreter.ClassloaderInterpreter.interpret(ClassloaderInterpreter.java):57\n\t at org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java):93\n\t at org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java):276\n\t at org.apache.zeppelin.scheduler.Job.run(Job.java):170\n\t at org.apache.zeppelin.scheduler.ParallelScheduler$JobRunner.run(ParallelScheduler.java):146\n\t at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java):511\n\t at java.util.concurrent.FutureTask.run(FutureTask.java):266\n\t at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java):180\n\t at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java):293\n\t at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java):1142\n\t at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java):617\n\t at java.lang.Thread.run(Thread.java):745\n"
      },
      "dateCreated": "Jul 20, 2015 1:32:15 PM",
      "dateStarted": "Jul 21, 2015 1:47:07 PM",
      "dateFinished": "Jul 21, 2015 1:47:07 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%cassandra\n#One liner batch\nUSE spark_demo;\nCREATE TABLE IF NOT EXISTS test_album(\n    artist text,\n    title text,\n    PRIMARY KEY((artist),title)\n);\nBEGIN UNLOGGED BATCH INSERT INTO test_album(artist,title) VALUES(\u0027me\u0027,\u0027mini me\u0027); INSERT INTO test_album(artist,title) VALUES(\u0027you\u0027,\u0027mini you\u0027); APPLY BATCH;\nSELECT * FROM test_album;",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "artist",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "artist",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1437479227277_2006692819",
      "id": "20150721-134707_371320771",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "artist\ttitle\nyou\tmini you\nme\tmini me\n"
      },
      "dateCreated": "Jul 21, 2015 1:47:07 PM",
      "dateStarted": "Jul 21, 2015 1:49:31 PM",
      "dateFinished": "Jul 21, 2015 1:49:31 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%cassandra\n\n#A bind predicate with semi-colon in the middle of a batch is surely an error\n\n@prepare[insert_test_album]\u003dINSERT INTO test_album(artist,title) VALUES(?,?)\n\nBEGIN UNLOGGED BATCH\n    @bind[insert_test_album]\u003d\u0027him\u0027,\u0027mini him\u0027;\nAPPLY BATCH;    ",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1437479343560_-427058513",
      "id": "20150721-134903_2089132919",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Invalid syntax for @bind. It should comply to the pattern: @bind[prepared_statement_name]\u003d10,\u0027jdoe\u0027,\u0027John DOE\u0027,12345,\u00272015-07-32 12:04:23.234\u0027 OR @bind[prepared_statement_name] with no bound value. No semi-colon"
      },
      "dateCreated": "Jul 21, 2015 1:49:03 PM",
      "dateStarted": "Jul 21, 2015 1:51:24 PM",
      "dateFinished": "Jul 21, 2015 1:51:24 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1437479484179_720429629",
      "id": "20150721-135124_1514085972",
      "dateCreated": "Jul 21, 2015 1:51:24 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Cassandra",
  "id": "2ATWSMVHT",
  "angularObjects": {
    "2ARKVF46K": [],
    "2ANYRH787": [],
    "2AQBHNCAB": [],
    "2ANRWDJG1": [],
    "2ANNAMCUB": [],
    "2ARR8D6R9": [],
    "2AQAS485Z": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}